import {createAsyncThunk,createSlice} from "@reduxjs/toolkit";
import {fetchCount} from "./counterAPI";
const initialState = {
    value:0,
    status: 'idle'
}

export const incrementAsync = createAsyncThunk(
    'counter/fetchCount', //A string action type value
    async (amount) => {
        //Type of response is defined in resolve
        const response = await fetchCount(amount)
        return response.data;
    }
);

export const counterSlice = createSlice({
    name: 'counter',
    initialState,
    reducers: {
        increment: state => {
            state.value += 1
        },
        decrement: state => {
            state.value -= 1
        },
        incrementByAmount: (state,action) => {
            state.value += action.payload
        },
        //The 'extraReducers' field lets the slice handle actions defined elsewhere,including actions generated by createAsyncThunk or in other slices
        extraReducers: (builder) => {
            builder.addCase(incrementAsync.pending,(state) =>{
                state.status = 'loading';
            }).addCase(incrementAsync.fulfilled,(state,action) => {
                state.status = 'idle';
                state.value += action.payload
            })
        }

    }
});

export const {increment,decrement,incrementByAmount} = counterSlice.actions
export const selectCount = (state) => state.counter.value;
//The function below
export default counterSlice.reducer